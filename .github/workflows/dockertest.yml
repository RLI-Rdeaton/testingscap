name: ci

on:
  release:
    types: [published]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ vars.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Build image
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:${{ github.event.release.tag_name }}, ${{ vars.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest
          labels: ${{ steps.meta.outputs.labels }}


  #scap:
  #  needs: build
  #  permissions:
  #    security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
  #    actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
  #  runs-on: ubuntu-latest
  #  container:
  #    image: alpine:3.20.3@sha256:beefdbd8a1da6d2915566fde36db9db0b524eb737fc57cd1367effd16dc0d06d
  #    env:
  #      SCAP_SECURITY_GUIDE_VERSION: "0.1.69"
  #      MICROSOFT_SARIF_MULTITOOL_VERSION: "4.5.4"
  #      MITRE_SAF_VERSION: "1.4.14"
  #      WOLFI_STIG_VERSION: "0.1.2"
  #      SSG_DIR: "ssg"
  #  steps:
  #    - name: Install prerequisites
  #      run: |
  #        # shellcheck shell=sh
  #        set -eu
  #        apk add curl docker jq openscap-docker npm gcompat unzip
  #        npm install -g "@microsoft/sarif-multitool@${MICROSOFT_SARIF_MULTITOOL_VERSION}"
  #        # Specify the sinon version to use.
  #        # Remove sinon from this line when sinon 16.1.2 (or later) is released, or when using MITRE_SAF_VERSION that includes https://github.com/mitre/saf/pull/1919
  #        npm install -g sinon@16.1.0 "@mitre/saf@${MITRE_SAF_VERSION}"
  #        mkdir -p "${SSG_DIR}"
  #        curl "https://github.com/ComplianceAsCode/content/releases/download/v${SCAP_SECURITY_GUIDE_VERSION}/scap-security-guide-${SCAP_SECURITY_GUIDE_VERSION}.zip" -Lso "${SSG_DIR}/ssg.zip"
  #        curl "https://github.com/chainguard-dev/stigs/archive/refs/tags/v${WOLFI_STIG_VERSION}.zip" -Lso "${SSG_DIR}/wolfi.zip"
  #        unzip "${SSG_DIR}/ssg.zip" -d "${SSG_DIR}"
  #        unzip "${SSG_DIR}/wolfi.zip" -d "${SSG_DIR}"
  #    - name: Login to Docker Hub
  #      uses: docker/login-action@v3
  #      with:
  #        username: ${{ vars.DOCKERHUB_USERNAME }}
  #        password: ${{ secrets.DOCKERHUB_TOKEN }}
  #    - name: Pull the docker image to scan
  #      run: |
  #        # shellcheck shell=sh
  #        set -eu
  #        # oscap-docker requires the image to have been pulled
  #        docker pull "${IMAGE_NAME}"
  #    - name: Run openscap
  #      run: |
  #        # shellcheck shell=sh
  #        set -eu
  #        # extract /etc/os-release
  #        container_id=$(docker create "${IMAGE_NAME}")
  #        if ! docker export "${container_id}" | tar -tvf - | grep -E '\setc/os-release( ->.*)?$' > /dev/null 2>&1 ; then
  #          >&2 echo "The operating system used by ${IMAGE_NAME} could not be detected."
  #          >&2 echo "Images that are not based on an operating system (such as distroless images) cannot be scanned by SCAP."
  #          exit 1
  #        fi
  #        docker cp -L "$container_id:/etc/os-release" .
  #        docker rm "$container_id"
  #        unset container_id
  #        set +e
  #        oscap-docker image "${IMAGE_NAME}" xccdf eval --verbose ERROR --fetch-remote-resources --profile "xccdf_basic_profile_.check" --results "openscap-report.xml" --report "openscap-report.html" "${SSG_DIR}/stigs-${WOLFI_STIG_VERSION}/gpos/xml/scap/ssg/content/ssg-chainguard-gpos-ds.xml"
  #        OSCAP_EXIT_CODE=$?
  #        set -e

  #        case "${OSCAP_EXIT_CODE}" in
  #          0)
  #            echo "All rules passed"
  #          ;;
  #          1)
  #            >&2 echo "An error occurred during evaluation"
  #            exit 2
  #          ;;
  #          2)
  #            echo "There is at least one rule with either fail or unknown result"
  #          ;;
  #          *)
  #            >&2 echo "openscap returned an unexpected exit status of $OSCAP_EXIT_CODE"
  #            exit "$OSCAP_EXIT_CODE"
  #          ;;
  #        esac
  #    # Converting Openscap to HDF to CSV is curtrently busted, see
  #    # https://github.com/mitre/saf/issues/2925 for more info.
  #    - name: Upload reports
  #      if: success() || failure() # always run even if the previous step fails
  #      uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4
  #      with:
  #        name: openscap-reports
  #        path: |
  #          openscap-report.xml


  #grype:
  #  needs: build
  #  runs-on: ubuntu-latest
  #  env:
  #    MITRE_SAF_VERSION: "1.4.14"
  #  steps:
  #    -
  #      name: Install prerequisites
  #      run: |
  #        set -eu
  #        sudo curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sudo sh -s -- -b /usr/local/bin
  #        sudo apt-get install -y npm
  #        # Specify the sinon version to use.
  #        # Remove sinon from this line when sinon 16.1.2 (or later) is released, or when using MITRE_SAF_VERSION that includes https://github.com/mitre/saf/pull/1919
  #        npm install -g sinon@16.1.0 "@mitre/saf@${MITRE_SAF_VERSION}"
  #    -
  #      name: Login to Docker Hub
  #      uses: docker/login-action@v3
  #      with:
  #        username: ${{ vars.DOCKERHUB_USERNAME }}
  #        password: ${{ secrets.DOCKERHUB_TOKEN }}
  #    # grype chainguard/wolfi-base -o json --file grype-results.json
  #    # grype ${{ env.IMAGE_NAME }} -o json --file grype-results.json
  #    -
  #      name: Grype scan
  #      run: |
  #        set -eu
  #        grype ${{ env.IMAGE_NAME }} -o json --file grype-results.json
  #    -
  #      name: Make the Grype JSON into an HDF file
  #      run: |
  #        set -eu
  #        saf convert anchoregrype2hdf -i grype-results.json -o grype-results.hdf.json
  #    # Converting HDF to CSV is currently busted,
  #    # https://github.com/mitre/saf/issues/2925 for more info.
  #    #-
  #    #  name: Make the HDF file into a CSV
  #    #  run: |
  #    #    set -eu
  #    #    saf convert hdf2csv -i grype-results.hdf.json -o grype-results.csv
  #    -
  #      name: Upload reports
  #      if: success() || failure() # always run even if the previous step fails
  #      uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4
  #      with:
  #        name: grype-results
  #        path: |
  #          grype-results.json
  #          grype-results.hdf.json
  #          grype-results.csv


  #trivy:
  #  needs: build
  #  permissions:
  #    security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
  #    actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
  #  runs-on: ubuntu-latest
  #  env:
  #    TRIVY_USERNAME: ${{ vars.DOCKERHUB_USERNAME }}
  #    TRIVY_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
  #    MITRE_SAF_VERSION: "1.4.14"
  #  steps:
  #    -
  #      name: Install prerequisites
  #      run: |
  #        # shellcheck shell=sh
  #        set -eu
  #        sudo apt-get install -y npm
  #        # Specify the sinon version to use.
  #        # Remove sinon from this line when sinon 16.1.2 (or later) is released, or when using MITRE_SAF_VERSION that includes https://github.com/mitre/saf/pull/1919
  #        npm install -g sinon@16.1.0 "@mitre/saf@${MITRE_SAF_VERSION}"
  #    -
  #      name: Scan image
  #      uses: aquasecurity/trivy-action@0.24.0
  #      with:
  #        #image-ref: ${{ env.IMAGE_NAME }}
  #        image-ref: 'redhat/ubi9:9.4'
  #        template: '@/contrib/asff.tpl'
  #        format: 'template'
  #        output: 'trivy-results.json'
  #    -
  #      name: Make the Trivy ASFF JSON into an HDF file
  #      run: |
  #        set -eu
  #        saf convert trivy2hdf -i trivy-results.json -o trivy-results
  #    # OKAY SO WE NEED TO TEST FOR WHEN WE HAVE ZERO RESULTS IN THE TRIVY FILE BECAUSE THAT IS A THING THAT HAPPENS.
  #    # Because the response for zero results is extremely well defined, this means we can use if/else logic to determine our path forward.
  #    # We will first test for the case of zero vulnerabilities; if the file doesn't come back with zero vulns, we move forward with conversion.
  #    - name: Test results and either create a stub file or convert them.
  #      run: |
  #        set -eu
  #        if grep -zoP '...."Findings": \[\n*....\]\n' trivy-results.json; then
  #          echo THE GREP WORKS
  #          echo YOU NEED TO FIGURE OUT WHAT YOU WANT TO PASS FOR CSV HERE
  #          echo TREMENDOUS EFFORT
  #        else
  #          echo CONVERTING FILE - THIS IS GOING TO FAIL UNTIL MITRE FIXES THINGS
  #          cp '${{ github.workspace }}/trivy-results/aquasecurity - aquasecurity.json' ${{ github.workspace }}/trivy-results.hdf.json
  #          saf convert hdf2csv -i trivy-results.hdf.json -o trivy-results.csv
  #        fi
  #    # Converting HDF to CSV is currently busted,
  #    # https://github.com/mitre/saf/issues/2925 for more info.
  #    #-
  #    #  name: Make the HDF file into a CSV
  #    #  run: |
  #    #    set -eu
  #    #    saf convert hdf2csv -i trivy-results.hdf.json -o trivy-results.csv
  #    -
  #      name: Upload reports
  #      if: success() || failure() # always run even if the previous step fails
  #      uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4
  #      with:
  #        name: trivy-results
  #        path: |
  #          trivy-results.hdf.json
  #          trivy-results.hdf
  #          trivy-results.csv

  #snyk:
  #  needs: build
  #  runs-on: ubuntu-latest
  #  steps:
  #    -
  #      name: Scan image with Snyk
  #      uses: snyk/actions/docker@master
  #      env:
  #        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  #      with:
  #        image: ${{ env.IMAGE_NAME }}

  snyk:
    needs: build
    runs-on: ubuntu-latest
    steps:
      -
        name: Install prerequisites
        run: |
          curl --compressed https://downloads.snyk.io/cli/stable/snyk-linux -o snyk
          sudo chmod +x ./snyk
          sudo mv ./snyk /usr/local/bin/
      -
        name: Signs of life
        run: |
          snyk --version

  #clam:
  #  needs: build
  #  permissions:
  #    security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
  #    actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
  #  runs-on: ubuntu-latest
  #  env:
  #    EXPORT_NAME: "build.tar"
  #    DIR_NAME: "build"
  #  steps:
  #    -
  #      name: Start ClamAV daemon
  #      uses: toblux/start-clamd-github-action@v0.2.1
  #      with:
  #        db_main: 'true'
  #        db_daily: 'true'
  #    -
  #      name: Login to Docker Hub
  #      uses: docker/login-action@v3
  #      with:
  #        username: ${{ vars.DOCKERHUB_USERNAME }}
  #        password: ${{ secrets.DOCKERHUB_TOKEN }}
  #    -
  #      name: Create, export, then extract to the filesystem
  #      run: |
  #        set -eu
  #        mkdir -p ${{ env.DIR_NAME }}
  #        CONT_ID=$(docker create ${{ env.IMAGE_NAME }})
  #        docker export ${CONT_ID} -o ${{ env.EXPORT_NAME }}
  #        tar --exclude='dev/null' --exclude='dev/random' --exclude='dev/urandom' --exclude='dev/zero' -xvf ${{ env.EXPORT_NAME }} -C ${{ github.workspace }}/${{ env.DIR_NAME }}
  #    -
  #      name: Scan using ClamAV to ensure no malware in static images
  #      run: |
  #        clamscan -ir ${{ github.workspace }}/${{ env.DIR_NAME }} > results.txt
  #    -
  #      name: Upload reports
  #      if: success() || failure() # always run even if the previous step fails
  #      uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4
  #      with:
  #        name: clamd-results
  #        path: |
  #          results.txt

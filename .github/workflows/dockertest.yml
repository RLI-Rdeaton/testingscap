name: ci

on:
  release:
    types: [published]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ vars.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Build image
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:${{ github.event.release.tag_name }}, ${{ vars.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest
          labels: ${{ steps.meta.outputs.labels }}


  scap:
    needs: build
    permissions:
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    runs-on: ubuntu-latest
    container:
      image: alpine:3.20.3@sha256:beefdbd8a1da6d2915566fde36db9db0b524eb737fc57cd1367effd16dc0d06d
      env:
        SCAP_SECURITY_GUIDE_VERSION: "0.1.69"
        MICROSOFT_SARIF_MULTITOOL_VERSION: "4.5.4"
        MITRE_SAF_VERSION: "1.4.14"
        WOLFI_STIG_VERSION: "0.1.2"
        SSG_DIR: "ssg"
    steps:
      - name: Install prerequisites
        run: |
          # shellcheck shell=sh
          set -eu
          apk add curl docker jq openscap-docker npm gcompat unzip
          npm install -g "@microsoft/sarif-multitool@${MICROSOFT_SARIF_MULTITOOL_VERSION}"
          # Specify the sinon version to use.
          # Remove sinon from this line when sinon 16.1.2 (or later) is released, or when using MITRE_SAF_VERSION that includes https://github.com/mitre/saf/pull/1919
          npm install -g sinon@16.1.0 "@mitre/saf@${MITRE_SAF_VERSION}"
          mkdir -p "${SSG_DIR}"
          curl "https://github.com/ComplianceAsCode/content/releases/download/v${SCAP_SECURITY_GUIDE_VERSION}/scap-security-guide-${SCAP_SECURITY_GUIDE_VERSION}.zip" -Lso "${SSG_DIR}/ssg.zip"
          curl "https://github.com/chainguard-dev/stigs/archive/refs/tags/v${WOLFI_STIG_VERSION}.zip" -Lso "${SSG_DIR}/wolfi.zip"
          unzip "${SSG_DIR}/ssg.zip" -d "${SSG_DIR}"
          unzip "${SSG_DIR}/wolfi.zip" -d "${SSG_DIR}"
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Pull the docker image to scan
        run: |
          # shellcheck shell=sh
          set -eu
          # oscap-docker requires the image to have been pulled
          docker pull "${IMAGE_NAME}"
      - name: Run openscap
        run: |
          # shellcheck shell=sh
          set -eu
          # extract /etc/os-release
          container_id=$(docker create "${IMAGE_NAME}")
          if ! docker export "${container_id}" | tar -tvf - | grep -E '\setc/os-release( ->.*)?$' > /dev/null 2>&1 ; then
            >&2 echo "The operating system used by ${IMAGE_NAME} could not be detected."
            >&2 echo "Images that are not based on an operating system (such as distroless images) cannot be scanned by SCAP."
            exit 1
          fi
          docker cp -L "$container_id:/etc/os-release" .
          docker rm "$container_id"
          unset container_id
          set +e
          oscap-docker image "${IMAGE_NAME}" xccdf eval --verbose ERROR --fetch-remote-resources --profile "xccdf_basic_profile_.check" --results "openscap-report.xml" --report "openscap-report.html" "${SSG_DIR}/stigs-${WOLFI_STIG_VERSION}/gpos/xml/scap/ssg/content/ssg-chainguard-gpos-ds.xml"
          OSCAP_EXIT_CODE=$?
          set -e

          case "${OSCAP_EXIT_CODE}" in
            0)
              echo "All rules passed"
            ;;
            1)
              >&2 echo "An error occurred during evaluation"
              exit 2
            ;;
            2)
              echo "There is at least one rule with either fail or unknown result"
            ;;
            *)
              >&2 echo "openscap returned an unexpected exit status of $OSCAP_EXIT_CODE"
              exit "$OSCAP_EXIT_CODE"
            ;;
          esac
      - name: Upload reports
        if: success() || failure() # always run even if the previous step fails
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4
        with:
          name: openscap-reports
          path: |
            openscap-report.xml

  # Grype currently busted, see https://github.com/anchore/scan-action/issues/378 , is to be fixed
  # I could probably fix it looking at the code but that isn't my mandate.
  #grype:
  #  needs: build
  #  runs-on: ubuntu-latest
  #  steps:
  #    -
  #      name: Scan image with Grype
  #      uses: anchore/scan-action@v4.1.2
  #      id: grypescan
  #      with:
  #        registry-username: ${{ vars.DOCKERHUB_USERNAME }}
  #        registry-password: ${{ secrets.DOCKERHUB_TOKEN }}
  #        image: ${{ env.IMAGE_NAME }}
  #        fail-build: false
  #    -
  #      name: upload Anchore scan SARIF report
  #      uses: github/codeql-action/upload-sarif@v2
  #      with:
  #        sarif_file: ${{ steps.grypescan.outputs.sarif }}

  #trivy:
  #  needs: build
  #  permissions:
  #    security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
  #    actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
  #  runs-on: ubuntu-latest
  #  env:
  #    TRIVY_USERNAME: ${{ vars.DOCKERHUB_USERNAME }}
  #    TRIVY_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
  #  steps:
  #    -
  #      name: Scan image
  #      uses: aquasecurity/trivy-action@0.24.0
  #      with:
  #        image-ref: ${{ env.IMAGE_NAME }}
  #        format: 'table'
  #        output: 'trivy-results.table'
  #    -
  #      name: Upload reports
  #      if: success() || failure() # always run even if the previous step fails
  #      uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4
  #      with:
  #        name: trivy-results
  #        path: |
  #          trivy-results.table

  #snyk:
  #  needs: build
  #  runs-on: ubuntu-latest
  #  steps:
  #    -
  #      name: Scan image with Snyk
  #      uses: snyk/actions/docker@master
  #      env:
  #        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  #      with:
  #        image: ${{ env.IMAGE_NAME }}
  clam:
    needs: build
    permissions:
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    runs-on: ubuntu-latest
    env:
      EXPORT_NAME: "build.tar"
      DIR_NAME: "build"
    steps:
      -
        name: Start ClamAV daemon
        uses: toblux/start-clamd-github-action@v0.2.1
        with:
          db_main: 'true'
          db_daily: 'true'
          log_verbose: 'true'
          #log_file: foo.txt
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Create the docker image to scan
        run: |
          set -eu
          docker create "${IMAGE_NAME}"
      # CONT_ID=$(docker create "${IMAGE_NAME}")
      -
        name: Create and export, then extract
        run: |
          set -eu
          mkdir -p ${{ env.DIR_NAME }}
          CONT_ID=$(docker create quay.io/petr_ruzicka/malware-cryptominer-container)
          docker export ${CONT_ID} -o ${{ env.EXPORT_NAME }}
      -
        name: EICAR TESTING
        run: |
          echo X5O!P%@AP[4PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H* > eicar.txt
          tar -cvf eicar.tar ./eicar.txt
      -
        name: REVEAL YOUR SECRETS
        run: |
          ls -latr ${{ github.workspace }}
          ls -latr
          pwd
      -
        name: Scan using ClamAV to ensure no malware in static images
        run: |
          clamscan -v ${{ env.EXPORT_NAME }} > foo.txt
          clamscan -v eicar.txt >> foo.txt
          clamscan -v eicar.tar >> foo.txt
          clamconf -n >> foo.txt
      -
        name: Upload reports
        if: success() || failure() # always run even if the previous step fails
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4
        with:
          name: clamd-results
          path: |
            foo.txt
